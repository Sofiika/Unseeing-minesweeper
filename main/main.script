local blocksize = 64 -- расстояние между центрами мин
local bottom_edge = 480 -- нижний отступ
local boardwidth = 10 -- число столбцов
local boardheight = 10 -- число строк
local first_game = true -- является ли текущая игра первой
local last_color = -1 -- цвет предыдущей нажатой мины
local clicable = true -- реагирует на нажатие или нет


function init(self)
	self.board = {} -- доска с минами

	msg.post(".", "acquire_input_focus")
end

-- создает таблицу с 0 и 1, обозначающими цвет мины
-- всего в таблице 50 нулей и 50 единиц
local function create_color_table()
	local color_table = {}
	math.randomseed(os.time())

	-- вначале таблица заполняется нулями
	for x = 0, boardwidth - 1 do
		color_table[x] = {}
		for y = 0, boardheight - 1 do
			color_table[x][y] = 0
		end
	end

	local x_pos = 0
	local y_pos = 0

	-- 50 раз выбираются рандомные координаты клетки, еще не занятой единицей,
	-- и туда ставится единица
	for x = 0, 49 do
		repeat
			x_pos = math.random(0, 9)
			y_pos = math.random(0, 9)
		until color_table[x_pos][y_pos] == 0
		
		color_table[x_pos][y_pos] = 1
	end
	return color_table
end

-- создает таблицу с минами, соответствующую таблице цветов
local function build_board()
	local board = {}
	math.randomseed(os.time())
	local color_table = create_color_table()
	local pos = vmath.vector3() -- координаты мины на поле
	local x = 0
	local y = 0
	for x = 0, boardwidth - 1 do
		pos.x = blocksize / 2 + blocksize * x 
		board[x] = {}
		for y = 0, boardheight - 1 do
			pos.y = bottom_edge + blocksize / 2 + blocksize * y
			local color_num = color_table[x][y]
			
			-- создается мина как экземпляр factory
			local id = factory.create('#mines_factory', pos, null, {color = color_num})
			board[x][y] = {id = id, x = x, y = y, color = color_num}
		end
	end
	return board
end

-- раскрашивает мину с заданными координатами в ее цвет и увеличивает число очков
local function change_mine_color(self, x, y)
	local slot = self.board[x][y]
	msg.post(slot.id, "change_color_and_points")

end

-- показывает все поле с раскрашенными минами
local function show_colored_board(self)
	for x = 0, boardwidth - 1 do
		for y = 0, boardheight - 1 do
			local slot = self.board[x][y]
			msg.post(slot.id, "change_color")
		end
	end
end

-- перекрашивает все мины в серый цвет
local function hide_colored_board(self)
	msg.post("/board#main_gui", 'clicable')
	clicable = true
	for x = 0, boardwidth - 1 do
		for y = 0, boardheight - 1 do
			local slot = self.board[x][y]
			msg.post(slot.id, "change_gray")
		end
	end
end

-- убирает все мины с поля
local function clear_board(self)
	for x = 0, boardwidth - 1 do
		for y = 0, boardheight - 1 do
			local slot = self.board[x][y]
			go.delete(slot.id)
		end
	end
end

-- проверяет соответствие текущего цвета предыдущему
local function check_previous_color(self, x, y)
	-- если координаты вне поля, ничего не происходит
	if x < 0 or x >= boardwidth or y < 0 or y >= boardheight or table.getn(self.board) == 0 or self.board[x][y] == nil then
		return
	end
	
	local slot = self.board[x][y]

	-- если это первый ход, то предыдущий цвет равен текущему
	if last_color == -1 then
		last_color = slot.color
	end

	-- если цвет текущей мины не равен предыдущему, то игра заканчивается
	if slot.color ~= last_color then
		msg.post(slot.id, "change_color")
		clicable = false
		msg.post("/board#main_gui", 'end')
		last_color = -1
		return
	end

	change_mine_color(self, x, y)

	last_color = slot.color
end

function on_message(self, message_id, message, sender)
	if message_id == hash("start_level") then
		-- если игра не первая, то надо очистить доску
		if not first_game then
			clear_board(self)
		end
		first_game = false
		-- установливается значение, чтобы не обрабатывать нажатия кнопок
		msg.post("/board#main_gui", 'not_clicable')
		clicable = false
		self.board = build_board()
		show_colored_board(self)
		timer.delay(3, false, hide_colored_board) -- на три секунды показывается доска
	end
end

function on_input(self, action_id, action)
	if not clicable then
		return
	end

	-- если нажато, то считаются координаты точки нажатия и вызывается метод, обрабатывающий нажатие
	if action_id == hash("touch") and action.pressed then
		local x = math.floor((action.x ) / blocksize)
		local y = math.floor((action.y - bottom_edge) / blocksize)
		check_previous_color(self, x, y)
	end
end